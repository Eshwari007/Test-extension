import { memo } from 'react';

import { BoxProps, Circle } from 'leather-styles/jsx';
import { token } from 'leather-styles/tokens';

import { useAccountGradient } from '@app/common/hooks/account/use-account-gradient';

const getAvatarText = (name: string, index: number) => {
  // Returns a string with the account's ordinal number.
  //
  // Assumes that account names starting with "Account" have been autogenerated
  // by the app. This will probably break when the account has a BNS name
  // starting with "Account", although it's probably good enough for now.
  if (name.startsWith('Account')) return String(index + 1);

  // At the time of writing, Firefox does not yet support Segmenter. Avatar
  // text will default to the account's ordinal number.
  if (!Intl.Segmenter) {
    return String(index + 1);
  }

  // Displays the first grapheme of the account name in uppercase.
  //
  // Using graphemes allows proper handling of emojis and other characters
  // with multiple code points.
  return [...new Intl.Segmenter().segment(name)][0].segment.toUpperCase();
};

interface AccountAvatarProps extends BoxProps {
  name: string;
  publicKey: string;
  index: number;
}
export const AccountAvatar = memo(({ name, publicKey, index, ...props }: AccountAvatarProps) => {
  const gradient = useAccountGradient(publicKey ?? '');
  const text = getAvatarText(name, index);
  const isFirstGraphemeEmoji = /\p{Extended_Pictographic}/u.test(text);

  return (
    <Circle
      flexShrink={0}
      // #4164 FIXME migrate color  '#f4f4f6'
      background={isFirstGraphemeEmoji ? '#f4f4f6' : token('colors.accent.background-primary')}
      backgroundImage={isFirstGraphemeEmoji ? undefined : gradient}
      color={token('colors.accent.action-primary-default')}
      userSelect="none"
      {...props}
    >
      {text}
    </Circle>
  );
});
